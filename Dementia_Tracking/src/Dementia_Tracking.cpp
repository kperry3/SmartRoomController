/* 
 * Project Smart Room Controller - IoT midterm
 * Description: Code to monitor a door to sense when a person 
 *              with dementia is trying to get outside 
 * Author: Kathryn Perry
 * Date: March 4, 2024
 */

// Include Particle Device OS APIs
#include "Particle.h"
#include "neopixel.h"
#include "Adafruit_SSD1306.h"
#include "Colors.h"
#include "IoTClassroom_CNM.h"

// Define constants
const int BUTTON1 = D18;
const int BUTTON2 = D17;
const int BUTTON3 = D15;
const int MOTIONPIN = D6;
const int HALLPIN = D7;
const int ULTRASONIC = A0;
const int OLED_RESET= -1;
const int TEXTSIZE = 1;
const int PIXELCOUNT = 8;
const int BRIGHTNESS = 5;
const int BULB = 2;
const int BRIGHTNESSMIN = 0;
const int BRIGHTNESSMAX = 255;
const int WEMO5 = 5;


// Declare objects
Adafruit_SSD1306 display(OLED_RESET);
Adafruit_NeoPixel pixel(PIXELCOUNT, SPI1, WS2812B);  
Button onOffButton(BUTTON1);
Button resetButton1(BUTTON2);
Button resetButton2(BUTTON3);
IoTTimer resetTimer;

enum SystemState {
  OFF,
  ON,
  RESETTING,
  SAFE,
  CAUTION,
  WARNING,
  EMERGENCY
};

// Functions
SystemState determineSystemState(SystemState state);
void pixelFill(int startPixel, int endPixel, int hexColor);
void displayNotification(String message);
float getDistance();

// Variables
SystemState systemState = SAFE;

// System Logo
const unsigned char dtLogo [] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 
	0xf9, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0x1c, 0xff, 0xff, 
	0xf1, 0xff, 0xff, 0xfe, 0x0e, 0x7e, 0xc3, 0xff, 0xfb, 0xff, 0xff, 0xf8, 0x60, 0xfe, 0x09, 0xff, 
	0xf0, 0x00, 0x1f, 0xf3, 0xf9, 0x9c, 0x39, 0xff, 0xfe, 0xfd, 0xff, 0xe7, 0xf8, 0xb0, 0xf9, 0xff, 
	0xff, 0xff, 0xff, 0xef, 0xe0, 0x03, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf0, 0x03, 0xfb, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x00, 0x0b, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0x87, 0xff, 
	0xff, 0xff, 0xff, 0xcf, 0xd0, 0xc0, 0x1f, 0xf0, 0xff, 0xff, 0xfb, 0xcf, 0xd1, 0x38, 0xff, 0x00, 
	0xff, 0xff, 0xf9, 0xcf, 0xf3, 0xfc, 0xfc, 0x01, 0xff, 0xff, 0xf8, 0xef, 0xe3, 0xfe, 0xf1, 0x83, 
	0xff, 0xff, 0xfc, 0x67, 0x87, 0xfc, 0xe2, 0x0f, 0xff, 0xff, 0xfc, 0x30, 0x37, 0xf9, 0xcc, 0x9f, 
	0xff, 0xf0, 0x7c, 0x9c, 0x71, 0xc3, 0x9a, 0x7f, 0xff, 0xe7, 0x1e, 0x4f, 0xf8, 0x0f, 0x12, 0xff, 
	0xff, 0xef, 0xce, 0x67, 0xf8, 0xfc, 0x05, 0xff, 0xff, 0xcf, 0xe7, 0x23, 0xf8, 0xfc, 0xe1, 0xff, 
	0xff, 0xdf, 0xf3, 0xa5, 0xf0, 0x79, 0xf3, 0xff, 0xff, 0xdf, 0xf3, 0x94, 0xe0, 0x33, 0xfb, 0xff, 
	0xff, 0xdf, 0xf3, 0xca, 0x4f, 0x87, 0xf9, 0xff, 0xf9, 0xcf, 0xe7, 0x61, 0x1f, 0xcf, 0xfb, 0xff, 
	0xc0, 0x4f, 0xe4, 0x14, 0xbf, 0xe7, 0xf3, 0xff, 0x8e, 0x0f, 0xe1, 0x80, 0xbf, 0xe6, 0x71, 0xff, 
	0xbf, 0xc6, 0xc7, 0xe0, 0x3f, 0xe4, 0xe0, 0xff, 0x3f, 0xe6, 0xcf, 0xf1, 0x3f, 0x67, 0x0e, 0x7f, 
	0x3f, 0xe3, 0x9f, 0xf0, 0x1f, 0x20, 0x3f, 0x3f, 0x3f, 0xf0, 0x1f, 0xf2, 0x87, 0x00, 0x7f, 0xbf, 
	0x3f, 0xc0, 0x27, 0xf6, 0x30, 0x05, 0xff, 0xbf, 0x3f, 0xe0, 0x2f, 0xe6, 0x00, 0x01, 0x3f, 0x3f, 
	0x8f, 0xc0, 0x0f, 0xcf, 0x0f, 0x80, 0xff, 0x3f, 0xc0, 0x00, 0x00, 0x1e, 0x7e, 0x00, 0x7f, 0x7f, 
	0xfa, 0x00, 0x30, 0x1e, 0x7c, 0x00, 0x00, 0x7f, 0xfc, 0xf8, 0x79, 0xde, 0x7f, 0x17, 0x80, 0xff, 
	0xf9, 0xc8, 0xbc, 0x0e, 0x7f, 0x33, 0xdf, 0xff, 0xf3, 0xf8, 0x9c, 0x0e, 0x7f, 0x3f, 0xef, 0xff, 
	0xf3, 0xf9, 0xfe, 0xc7, 0x7f, 0x3f, 0xe7, 0xff, 0xf3, 0xf9, 0xfe, 0x43, 0x1e, 0x3f, 0xe7, 0xff, 
	0xf3, 0xf9, 0xfe, 0x60, 0x80, 0x3f, 0xe7, 0xff, 0xf3, 0xf8, 0xfe, 0x72, 0x70, 0x3f, 0xcf, 0xff, 
	0xfb, 0xf0, 0xfc, 0xf8, 0x1c, 0x0f, 0x9f, 0xff, 0xf9, 0x86, 0x38, 0xfe, 0x0d, 0x60, 0x3f, 0xff, 
	0xfc, 0x0f, 0x03, 0x01, 0x00, 0x78, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x04, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc2, 0x00, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


// Let Device OS manage the connection to the Particle Cloud
SYSTEM_MODE(AUTOMATIC);

void setup() {
  // Initialize serial port
  Serial.begin(9600);
  waitFor(Serial.isConnected, 10000);

  // Motion Sensor
  pinMode(MOTIONPIN, INPUT);

  //Hall Sensor
  pinMode(HALLPIN, INPUT);

  //Ultrasonic Sensor
  pinMode(ULTRASONIC, INPUT);

  // OLED
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();

  // Neopixels
  pixel.begin();
  pixel.setBrightness(BRIGHTNESS);
  pixel.show(); 
}

void loop() {
  // Read Buttons
  if(onOffButton.isPressed()){
    Serial.printf("Button pressed!!\n\n\n");
    if(systemState != OFF){
     systemState = OFF;
    }
    else {
      systemState = SAFE;
    }
  }
  else if(resetButton1.isPressed() || resetButton2.isPressed()){
    resetTimer.startTimer(30000);  // 30 seconds should be enough time for a person to get through the door
    systemState = RESETTING;  
  }

  systemState = determineSystemState(systemState);

}

// Determines what state the system is in and what event to perform
SystemState determineSystemState (SystemState state){
  float distance;
  int hallValue, motionValue;
  display.clearDisplay();
 
  switch(state){
    case OFF:
      wemoWrite(WEMO5, LOW);

      setHue(BULB, HIGH, HueBlue, 255, 255);

      pixelFill(0, PIXELCOUNT, blue);
      display.drawBitmap(0, 10, dtLogo, 64, 64, WHITE);
      displayNotification("System Off");
    break;
    case SAFE:
      wemoWrite(WEMO5, LOW);
      setHue(BULB, HIGH, HueGreen, 255, 255);
      pixelFill(0, PIXELCOUNT, green); 
      displayNotification("Safe \n\n\t Person Safe");
      distance = getDistance();
      if((distance > 3) || (distance < 0)){
        state = SAFE;
      }
      else if((distance > 0 && distance <= 3)) {
        state = CAUTION;
      }
    break;
    case RESETTING:
      setHue(BULB, HIGH, HueViolet, 255, 255);
      pixelFill(0, PIXELCOUNT, purple); 
      wemoWrite(WEMO5, LOW);
      display.drawBitmap(0, 10, dtLogo, 64, 64, WHITE);
      displayNotification("System Resetting....");
     if(resetTimer.isTimerReady()){
      state = SAFE;
      }
    break;
    case CAUTION:
      wemoWrite(WEMO5, HIGH);
      setHue(BULB, HIGH, HueYellow, random(32, 255), 255);
      pixelFill(0, PIXELCOUNT, yellow); 
      displayNotification("Caution \n\n\t Person Near Door");
      distance = getDistance();
      hallValue = digitalRead(HALLPIN);
      if((distance > 0 && distance <= 3) && hallValue == LOW){ // CHANGE BACK TO 36
        state = WARNING;
      }
      else if((distance > 3) || (distance < 0)){
        state = SAFE;
      }
      
    break;
    case WARNING:
      wemoWrite(WEMO5, HIGH);
      setHue(BULB, HIGH, HueOrange, random(32, 255), 255);
      pixelFill(0, PIXELCOUNT, 0XD24E01); 
      displayNotification("Warning \n\n\t Person Turning Door Knob");
      distance = getDistance();
      motionValue = digitalRead(MOTIONPIN);
      hallValue = digitalRead(HALLPIN);
      if(motionValue == HIGH){
        state = EMERGENCY;
      }
      else if (hallValue == HIGH){
        state = CAUTION;
      }

    break;
    case EMERGENCY:
      wemoWrite(WEMO5, HIGH);
      setHue(BULB, HIGH, HueRed, random(32, 255), 255);
      pixel.clear();
      displayNotification("Emergency \n\n\t Person Opened Door");
      pixelFill(0, PIXELCOUNT, red); 
      wemoWrite(WEMO5, HIGH);
    break;
    default:
     state = OFF;
    break;
  }

  return state; 
}

// Displays notifications to OLED
void displayNotification(String message) {
  display.setTextSize(TEXTSIZE);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.printf("%s\n", message.c_str());
  display.display();
}
 

// Lights up a segment of the pixel strip while randomly changing brightness for a blinking affect
void pixelFill(int startPixel, int endPixel, int hexColor){
  if((hexColor != blue) && (hexColor != green) && (hexColor != purple)){
    pixel.setBrightness(random(1, 255));
  }
  
  for(int i = startPixel; i < endPixel; i++){
    pixel.setPixelColor(i, hexColor);
    pixel.show();
  }
}

// Reads the ultrasonic sensor and converts the value into inches
float getDistance(){
  
  float value = analogRead(ULTRASONIC);
  float multiplier = ((1253.33*12)/(2*1000000.0)); // Convert value read to inches
  value = value*multiplier;
  return value;
 }